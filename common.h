/*
Group 10
Akshay Shukla 2022A7PS0087P
Gobind Singh 2022A7PS0083P
Siddhartha Gotur 2022A7PS0070P
Sriram Sudheer Hebbale 2022A7PS0147P
Granth Jain 2022A7PS0172P
*/

#ifndef COMMONH
#define COMMONH

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

// ========================== Enum for Terminals (Token Types) ==========================
// Represents all possible tokens in the lexical analysis phase.
typedef enum {
    TK_MAIN, TK_END, TK_FUNID, TK_INPUT, TK_PARAMETER, TK_LIST, TK_SQL, TK_SQR, 
    TK_OUTPUT, TK_ID, TK_INT, TK_REAL, TK_RECORD, TK_RUID, TK_UNION, TK_COMMA, 
    TK_SEM, TK_COLON, TK_GLOBAL, TK_ASSIGNOP, TK_DOT, TK_CALL, TK_WITH, TK_PARAMETERS, 
    TK_WHILE, TK_OP, TK_CL, TK_ENDWHILE, TK_IF, TK_THEN, TK_ELSE, TK_ENDIF, TK_READ, 
    TK_WRITE, TK_MUL, TK_DIV, TK_PLUS, TK_MINUS, TK_NOT, TK_AND, TK_OR, TK_LT, TK_LE, 
    TK_EQ, TK_GT, TK_GE, TK_NE, TK_NUM, TK_RNUM, TK_RETURN, TK_DEFINETYPE, TK_AS, 
    TK_ENDRECORD, TK_ENDUNION, TK_FIELDID, TK_TYPE, EPS, // EPSILON (used in parsing)
    END_OF_INPUT, DOLLAR, // End markers
    TK_COMMENT, // Comment token (ignored during parsing)
    TERMINAL_COUNT // Total number of terminal symbols
} Terminal;

// ========================== Token Node (Linked List Node for Tokens) ==========================
// Represents a single token with its attributes.
typedef struct TokenNode {
    Terminal token;       // Token type (as defined in the Terminal enum)
    char *lexeme;         // String representation of the token
    int lineNumber;       // Line number where the token was found
    int ival;            // Integer value (for TK_NUM tokens)
    float fval;          // Floating-point value (for TK_RNUM tokens)
    struct TokenNode *next; // Pointer to the next token in the list (linked list)
} TokenNode;

// Global pointer to keep track of the next token to be processed
extern TokenNode* lookAheadPtr;

// ========================== Token List (Linked List for Storing Tokens) ==========================
// Stores a list of tokens generated by the lexical analyzer.
typedef struct TokenList {
    int count;          // Number of tokens in the list
    TokenNode *head;    // Pointer to the first token node in the list
} TokenList;

#endif // COMMONH
